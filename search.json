[{"path":"https://hassanpazira.github.io/BFI/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 BFI authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hassanpazira.github.io/BFI/articles/BFI.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"An Introduction to BFI","text":"R package BFI (Bayesian Federated Inference) provides several functions carry Bayesian Federated Inference method two kinds models (GLM Survival) multicenteral data without combining/sharing . tutorial focus GLM , version package available two commonly used families: \"binomial\" \"gaussian\". mostly using functions include bfi(), MAP.estimation(), inv.prior.cov(). following, see BFI package can applied real datasets included package.","code":""},{"path":"https://hassanpazira.github.io/BFI/articles/BFI.html","id":"how-to-use-it","dir":"Articles","previous_headings":"","what":"How to use it?","title":"An Introduction to BFI","text":"go , first install load BFI package using devtools package: following code can see two available datasets package: trauma Nurses. trauma data can utilized \"binomial\" family Nurses data can used \"gaussian\". avoid repetition, use trauma data set. Load inspect trauma data follows: data set consists data 371 trauma patients three hospitals (peripheral hospital without neuro-surgical unit, status=1, peripheral hospital neuro-surgical unit, status=2, academic medical center, status=3). can see 6 columns: covariates sex (dichotomous), age (continuous), ISS (Injury Severity Score, continuous), GCS (Glasgow Coma Scale, continuous) predictors, mortality response variable. hospital categorical variable indicates hospitals involved study. information dataset use","code":"# First install and load the package 'devtools' if(!require(devtools)) {install.packages(\"devtools\")} library(devtools)  # Now install BFI from GitHub #devtools::install_github(\"hassanpazira/BFI\", force = TRUE)  # load BFI library(BFI) data(package = \"BFI\") # Load 'trauma' in the R workspace data(\"trauma\")  # Get the number of rows and columns dim(trauma) ## [1] 371   6 # To get an idea of the dataset, print the first 7 rows head(trauma, 7) ##   sex age hospital ISS GCS mortality ## 1   1  20        3  24  15         0 ## 2   0  38        3  34  13         0 ## 3   0  37        3  50  15         0 ## 4   0  17        3  43   4         1 ## 5   0  49        3  29  15         0 ## 6   0  30        3  22  15         0 ## 7   1  84        2  66   3         1 (col_name <- colnames(trauma)) ## [1] \"sex\"       \"age\"       \"hospital\"  \"ISS\"       \"GCS\"       \"mortality\" # Get some info about the dataset from the help file ?trauma"},{"path":[]},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Calling BFI from Python","text":"BFI R package performs Bayesian Federated Inference (BFI) linear, logistic, Cox regression models. Since Python package carrying BFI method far, vignette describes usage R package BFI Python environment. move Python environment, need prepare operating system. Although, explain following prepare different systems (‘MacOS’, ‘Ubuntu’ ‘Windows’), recommend use ‘Google Colab’ write execute (following) Python codes can done system browser without preparations.","code":""},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"google-colab","dir":"Articles","previous_headings":"","what":"Google Colab","title":"Calling BFI from Python","text":"First go Google Colab https://colab.google https://colab.research.google.com, click New Notebook. Now, skip two following sections jump third section Python script.","code":""},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"python-installation","dir":"Articles","previous_headings":"","what":"Python Installation","title":"Calling BFI from Python","text":"steps install latest version Python ‘MacOS’, ‘Ubuntu’ ‘Windows’ follows:","code":""},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"on-macos","dir":"Articles","previous_headings":"Python Installation","what":"On MacOS","title":"Calling BFI from Python","text":"Open terminal window (cmd + space search ‘Terminal’) install package manager ‘Homebrew’ executing following command: Install latest version Python (Python 3) following command: Verify installation checking Python version: ’s assumed R also installed configured system. , following can :","code":"/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" brew install python@3 python3 --version # Install XCode command-line tools xcode-select --install  # Install R brew install --cask r"},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"on-ubuntu","dir":"Articles","previous_headings":"Python Installation","what":"On Ubuntu","title":"Calling BFI from Python","text":"Update package repositories get latest package information running following command terminal window: Verify Python indeed installed system following command: already Python (Python 3) installed system, need upgrade latest version follows: case Python installed first place, latest version Python can installed using following command: Verify installation checking Python version: don’t R installed configured, just run following:","code":"sudo apt-get update -y python3 --version sudo apt-get upgrade python3 sudo apt-get install python3 python3 --version # Install R sudo apt-get install r-base"},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"on-windows","dir":"Articles","previous_headings":"Python Installation","what":"On Windows","title":"Calling BFI from Python","text":"default, Python usually installed Windows. However, can check exists system running one line command command prompt. Go Start enter cmd search bar, click Command Prompt. Enter command python --version python3 --version command prompt. download Python, go official Python download website Windows: https://www.python.org. Find stable Python 3 release, download executable file system appropriate link. installer downloaded, open/run Python installer install Python. Select Add Python 3.x PATH checkbox, enables users launch Python command line, select Install Now. installation complete, can verify whether Python installation successful command line. Enter command python --version python3 --version command prompt. ’s assumed R also installed system. don’t R installed, just visit CRAN downloads (https://cran.r-project.org) get last version.","code":""},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"installation-of-required-modules","dir":"Articles","previous_headings":"","what":"Installation of required modules","title":"Calling BFI from Python","text":"required modules installed PIP. PIP (Python package manager) helps us install use various packages/modules Python programming. Install latest version PIP required modules running following commands different systems.","code":""},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"on-macos-1","dir":"Articles","previous_headings":"Installation of required modules","what":"On MacOS","title":"Calling BFI from Python","text":"Install/Upgrade latest version PIP running Install required modules running following commands","code":"# Installing PIP python3 -m pip install --user --upgrade pip # Installing the 'pandas' module pip3 install pandas  # Installing the 'numpy' module pip3 install numpy  # Installing the 'rpy2' module pip3 install rpy2"},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"on-ubuntu-1","dir":"Articles","previous_headings":"Installation of required modules","what":"On Ubuntu","title":"Calling BFI from Python","text":"install PIP use code Verify successfully installed PIP running Now, install required modules typing following commands lines installation modules install , use following: Finally, use show command verify whether module now part Python packages:","code":"# Installing PIP sudo apt-get install python3-pip pip3 -V # Installing the 'pandas' module sudo pip3 install pandas  # Installing the 'numpy' module sudo pip3 install numpy  # Installing the 'rpy2' module sudo pip3 install rpy2 # Installing the 'pandas' module sudo apt-get install python3-pandas  # Installing the 'numpy' module sudo apt-get install python3-numpy  # Installing the 'rpy2' module sudo apt-get install python3-rpy2 pip3 show pandas pip3 show numpy pip3 show rpy2"},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"on-windows-1","dir":"Articles","previous_headings":"Installation of required modules","what":"On Windows","title":"Calling BFI from Python","text":"Usually, PIP automatically installed using Python downloaded https://www.python.org. followed previous steps provided vignette, PIP installed system. check PIP already installed Windows, open command line , type pip -V, press Enter. PIP installed: First download get-pip.py folder computer. , open command prompt navigate folder containing get-pip.py installer. Finally, run following command: PIP now installed successfully. receive ‘file found’ error, double check directory path file. can use dir command view entire contents directory. information can found : https://pip.pypa.io/en/stable/installation. Now, install required modules running following commands: Now, can start coding Python using Python’s command-line interpreter IDLE application. Go Start enter python search bar. can see Python 3.x IDLE can used coding. Open one follow following steps.","code":"python get-pip.py # Installing the 'pandas' module pip3 install pandas  # Installing the 'numpy' module pip3 install numpy  # Installing the 'rpy2' module pip3 install rpy2"},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"Python","dir":"Articles","previous_headings":"","what":"Python script","title":"Calling BFI from Python","text":"assumed required packages properly installed, case Google Colab. Now move work rpy2 package inside Python script! Python script, first go Python Environment typing following command terminal window (skip line already Google Colab): now, following codes run Python environment. want copy codes go last section.","code":"python3"},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"importing-python-modules-and-functions","dir":"Articles","previous_headings":"Python script","what":"Importing Python modules and functions","title":"Calling BFI from Python","text":"Use following codes import required Python modules: using following codes imports required functions importr() data():","code":"# import 'pandas' package import pandas as pd  # import 'numpy' package import numpy as np                  # import 'rpy2' package import rpy2 from rpy2.robjects.packages import importr, data from rpy2.robjects.vectors import StrVector from rpy2.robjects import numpy2ri, pandas2ri # activation of the automatic conversion of 'numpy' and 'pandas' objects into rpy2 objects numpy2ri.activate()    pandas2ri.activate()"},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"installing-r-packages-from-cran-and-github","dir":"Articles","previous_headings":"Python script","what":"Installing R packages from CRAN and GitHub:","title":"Calling BFI from Python","text":"First load packages preinstalled R using importr() follows: install R packages stats devtools CRAN typing Now load installed packages using","code":"# import R's \"utils\" package utils = importr('utils')  # import R's \"base\" package base = importr('base') utils.chooseCRANmirror(ind=1)  # which selects the first mirror in the list package_names = ('stats', 'devtools') utils.install_packages(StrVector(package_names)) stats = importr('stats') devtools = importr('devtools')"},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"installing-the-bfi-package-from-github","dir":"Articles","previous_headings":"Python script","what":"Installing the BFI package from GitHub","title":"Calling BFI from Python","text":"BFI package can installed loaded using following lines:","code":"# Installing the 'BFI' package devtools.install_github(\"hassanpazira/BFI\", force = True)  # Loading the package BFI = importr('BFI')"},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Calling BFI from Python","text":"Now generate two datasets independently Gaussian distribution, apply main functions BFI package datasets:","code":""},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"data-simulation-for-two-local-centers","dir":"Articles","previous_headings":"Examples","what":"Data Simulation for two local centers","title":"Calling BFI from Python","text":"First generate 30 samples randomly Gaussian distribution 3 covariates: generate randomly 50 samples Gaussian distribution 3 covariates:","code":"# model parameters: 'theta' and 'p' are assumed to be the same for both centers: theta = np.array([1, 2, 3, 4, 0.75])   # intercept is theta[0], sigma2 is theta[4] p = 3     # number of regression parameters without intercept  # Center 1: n1 = 30   # sample size of center 1 X1 = np.random.normal(size=(n1, p))  X1.shape   # dimension of X1 X1 = pd.DataFrame(X1, columns=['X1', 'X2', 'X3']) mu1 = theta[0] + np.dot(X1, np.delete(theta, [0, 4]))  # for gaussian: \\eta = \\mu  X1 = pandas2ri.py2rpy(X1)   # == base.as_data_frame(X1) y1 = np.random.normal(loc=mu1, scale=np.sqrt(theta[4])) # Center 2: n2 = 50   # sample size of center 2 X2 = np.random.normal(size=(n2, p)) X2 = pd.DataFrame(X2, columns=['X1', 'X2', 'X3']) mu2 = theta[0] + np.dot(X2, np.delete(theta, [0, 4])) X2 = pandas2ri.py2rpy(X2) y2 = np.random.normal(loc=mu2, scale=np.sqrt(theta[4]))"},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"map-estimates-at-the-local-centers","dir":"Articles","previous_headings":"Examples","what":"MAP estimates at the local centers","title":"Calling BFI from Python","text":"following compute Maximum Posterior (MAP) estimators parameters center 1: Obtaining MAP estimators parameters center 2 using following:","code":"# Creating an inverse covariance matrix for a Gaussian prior for center 1 Lambda1 = BFI.inv_prior_cov(X1, 0.01, 'gaussian') fit1 = BFI.MAP_estimation(y1, X1, 'gaussian', Lambda1) print(fit1) theta_hat1 = fit1.rx2(\"theta_hat\") # MAP estimates of the intercept and coefficients A_hat1 = fit1.rx2(\"A_hat\")         # minus the curvature matrix summary_1 = BFI.summary_bfi(fit1, cur_mat = True) # Creating an inverse covariance matrix for Gaussian prior for center 2 Lambda2 = BFI.inv_prior_cov(X2, 0.01, 'gaussian') # MAP estimates fit2 = BFI.MAP_estimation(y2, X2, 'gaussian', Lambda2) theta_hat2 = fit2.rx2(\"theta_hat\") # MAP estimates of the parameters A_hat2 = fit2.rx2(\"A_hat\")         # minus the curvature matrix around 'theta_hat2' summary_2 = BFI.summary_bfi(fit2, cur_mat = True)"},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"bfi-at-central-center","dir":"Articles","previous_headings":"Examples","what":"BFI at central center","title":"Calling BFI from Python","text":"","code":"theta_hats = base.list(theta_hat1, theta_hat2) A_hats = base.list(A_hat1, A_hat2) Lambda1 = pd.DataFrame(Lambda1, index=fit1.rx2(\"names\"), columns=fit1.rx2(\"names\")) Lambda2 = pd.DataFrame(Lambda2, index=fit2.rx2(\"names\"), columns=fit2.rx2(\"names\")) Lambdas = base.list(Lambda1, Lambda2) fit_bfi = BFI.bfi(theta_hats, A_hats, Lambdas) print(fit_bfi) summary_bfi = BFI.summary_bfi(fit_bfi, cur_mat = True)"},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"datasets-included-in-the-bfi-package","dir":"Articles","previous_headings":"Examples","what":"Datasets included in the BFI package","title":"Calling BFI from Python","text":"find list datasets included package run: order use datasets available BFI package, use following codes: end, use following deactivate automatic conversion:","code":"print(utils.data(package = \"BFI\")) Nurses = data(BFI).fetch('Nurses')['Nurses']  # is equivalent to BFI::Nurses in R print(\"Dimension of the 'Nurses' data: \\n\", base.dim(Nurses)) print(\"Colnames of the 'Nurses' data: \\n\", base.colnames(Nurses))  trauma = data(BFI).fetch('trauma')['trauma']  # is equivalent to BFI::trauma in R print(\"Dimension of the 'trauma' data: \\n\", base.dim(trauma)) print(\"Colnames of the 'trauma' data: \\n\", base.colnames(trauma)) numpy2ri.deactivate() pandas2ri.deactivate()"},{"path":"https://hassanpazira.github.io/BFI/articles/Python.html","id":"allcodes","dir":"Articles","previous_headings":"","what":"All codes together","title":"Calling BFI from Python","text":"need codes copy paste example Google Colab, codes:","code":"# import 'pandas' package import pandas as pd  # import 'numpy' package import numpy as np                  # import 'rpy2' package import rpy2                    from rpy2.robjects.packages import importr, data from rpy2.robjects.vectors import StrVector from rpy2.robjects import numpy2ri, pandas2ri # activation of the automatic conversion of 'numpy' and 'pandas' objects into rpy2 objects numpy2ri.activate()    pandas2ri.activate()  # import R's \"utils\" package utils = importr('utils')  # import R's \"base\" package base = importr('base')  utils.chooseCRANmirror(ind=1)  # which selects the first mirror in the list package_names = ('stats', 'devtools') utils.install_packages(StrVector(package_names))  # loading the installed packages stats = importr('stats') devtools = importr('devtools')  # Installing the 'BFI' package devtools.install_github(\"hassanpazira/BFI\", force = True)  # Loading the package BFI = importr('BFI')  # Examples  # model parameters: 'theta' and 'p' are assumed to be the same for both centers: theta = np.array([1, 2, 3, 4, 0.75])   # intercept is theta[0], sigma2 is theta[4] p = 3     # number of regression parameters without intercept  # Data Simulation for center 1 n1 = 30   # sample size of center 1 X1 = np.random.normal(size=(n1, p))  X1.shape   # dimension of X1 X1 = pd.DataFrame(X1, columns=['X1', 'X2', 'X3']) mu1 = theta[0] + np.dot(X1, np.delete(theta, [0, 4]))  # for gaussian: \\eta = \\mu  X1 = pandas2ri.py2rpy(X1)   # == base.as_data_frame(X1) y1 = np.random.normal(loc=mu1, scale=np.sqrt(theta[4]))  # Data Simulation for center 2 n2 = 50   # sample size of center 2 X2 = np.random.normal(size=(n2, p)) X2 = pd.DataFrame(X2, columns=['X1', 'X2', 'X3']) mu2 = theta[0] + np.dot(X2, np.delete(theta, [0, 4])) X2 = pandas2ri.py2rpy(X2) y2 = np.random.normal(loc=mu2, scale=np.sqrt(theta[4]))  # MAP estimates at center 1 # Creating an inverse covariance matrix for a Gaussian prior for center 1 Lambda1 = BFI.inv_prior_cov(X1, 0.01, 'gaussian') fit1 = BFI.MAP_estimation(y1, X1, 'gaussian', Lambda1) print(fit1) theta_hat1 = fit1.rx2(\"theta_hat\") # MAP estimates of the intercept and coefficients A_hat1 = fit1.rx2(\"A_hat\")         # minus the curvature matrix summary_1 = BFI.summary_bfi(fit1, cur_mat = True)  # MAP estimates at center 2 # Creating an inverse covariance matrix for Gaussian prior for center 2 Lambda2 = BFI.inv_prior_cov(X2, 0.01, 'gaussian') # MAP estimates fit2 = BFI.MAP_estimation(y2, X2, 'gaussian', Lambda2) theta_hat2 = fit2.rx2(\"theta_hat\") # MAP estimates of the parameters A_hat2 = fit2.rx2(\"A_hat\")         # minus the curvature matrix around 'theta_hat2' summary_2 = BFI.summary_bfi(fit2, cur_mat = True)  # BFI at central center theta_hats = base.list(theta_hat1, theta_hat2) A_hats = base.list(A_hat1, A_hat2) Lambda1 = pd.DataFrame(Lambda1, index=fit1.rx2(\"names\"), columns=fit1.rx2(\"names\")) Lambda2 = pd.DataFrame(Lambda2, index=fit2.rx2(\"names\"), columns=fit2.rx2(\"names\")) Lambdas = base.list(Lambda1, Lambda2) fit_bfi = BFI.bfi(theta_hats, A_hats, Lambdas) print(fit_bfi) summary_bfi = BFI.summary_bfi(fit_bfi, cur_mat = True)  # To find a list of all datasets included in the package: print(utils.data(package = \"BFI\"))  Nurses = data(BFI).fetch('Nurses')['Nurses'] print(\"Dimension of the 'Nurses' data: \\n\", base.dim(Nurses)) print(\"Colnames of the 'Nurses' data: \\n\", base.colnames(Nurses))  trauma = data(BFI).fetch('trauma')['trauma'] print(\"Dimension of the 'trauma' data: \\n\", base.dim(trauma)) print(\"Colnames of the 'trauma' data: \\n\", base.colnames(trauma))"},{"path":"https://hassanpazira.github.io/BFI/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hassan Pazira. Author, maintainer. Marianne . Jonker. Author. Emanuele Massa. Contributor. Anthony C.C. Coolen. Contributor.","code":""},{"path":"https://hassanpazira.github.io/BFI/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pazira H, Jonker MA, Massa E, Coolen AC (2024). BFI: Bayesian Federated Inference. R package version 1.1.2, https://hassanpazira.github.io/BFI/.","code":"@Manual{,   title = {BFI: Bayesian Federated Inference},   author = {Hassan Pazira and Marianne A. Jonker and Emanuele Massa and Anthony C.C. Coolen},   year = {2024},   note = {R package version 1.1.2},   url = {https://hassanpazira.github.io/BFI/}, }"},{"path":"https://hassanpazira.github.io/BFI/index.html","id":"bfi-","dir":"","previous_headings":"","what":"Bayesian Federated Inference","title":"Bayesian Federated Inference","text":"Bayesian Federated Inference","code":""},{"path":"https://hassanpazira.github.io/BFI/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Bayesian Federated Inference","text":"Due limited size available data sets especially rare diseases, sometimes challenging identify relevant predictive features using multivariable statistical analysis. issue may resolved combining data multiple centers one centralized location without sharing data , difficult reality privacy security concerns. address challenges, developed implemented Bayesian Federated Inference (BFI) framework multicenter data. aims leverage statistical power larger (combined) data sets without requiring data aggregated one location. BFI framework allows center using local data infer optimal parameter values well additional features posterior parameter distribution able gather information captured alternative techniques. One benefit BFI alternative approaches , one inference cycle across centers required BFI. R package called BFI created perform Bayesian Federated Inference. following instructions install development version BFI package computer.","code":""},{"path":"https://hassanpazira.github.io/BFI/index.html","id":"install-r-and-rstudio","dir":"","previous_headings":"","what":"Install R and RStudio","title":"Bayesian Federated Inference","text":"First, need install R RStudio: Install R Install RStudio Desktop (R installed) details installing R RStudio, see page. need help learning R, see RStudio Education.","code":""},{"path":"https://hassanpazira.github.io/BFI/index.html","id":"install-bfi-package","dir":"","previous_headings":"","what":"Install BFI package","title":"Bayesian Federated Inference","text":"order install BFI package directly Github, need devtools package. Invoke R RStudio type (Console) load typing: Next, install BFI follows: package can now loaded R used :","code":"if(!require(devtools)) {install.packages(\"devtools\")} library(devtools) devtools::install_github(\"hassanpazira/BFI\", force = TRUE) library(BFI)"},{"path":"https://hassanpazira.github.io/BFI/index.html","id":"update","dir":"","previous_headings":"","what":"Update","title":"Bayesian Federated Inference","text":"latest version BFIpackage 1.1.2. check current version BFI installed R library, use:","code":"packageVersion(\"BFI\")"},{"path":"https://hassanpazira.github.io/BFI/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":"Bayesian Federated Inference","text":"BFI package provides several functions, important following two main functions: MAP.estimation(): used centers, result sent central server. bfi(): used central server. access R documentation functions, example bfi(), enter following command:","code":"help(bfi, package = \"BFI\")    # or, equivalently, after loading the BFI package  ?bfi"},{"path":"https://hassanpazira.github.io/BFI/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Bayesian Federated Inference","text":"Let’s look following example see BFI package can used. examples details look BFI vignette typing use vignette(\"BFI\") see BFI vignette Help tab RStudio. Now, generate two independent (local) data sets Gaussian distribution, apply package see works. First apply function MAP.estimation() local data, apply bfi() function aggregated results.","code":"devtools::install_github(\"hassanpazira/BFI\", dependencies = TRUE, build_vignettes = TRUE, force = TRUE) browseVignettes(\"BFI\")  # to see all vignettes from the BFI package in an HTML browser. #------------- # y ~ Gaussian #------------- # model assumptions: p     <- 3                     # number of coefficients without intercept theta <- c(1, rep(2, p), 1.5)  # regression coefficients (theta[1] is the intercept) and sigma2 = 1.5  #----------------------------------- # Data simulation for local center 1 #----------------------------------- n1   <- 30                                       # sample size of center 1 X1   <- data.frame(matrix(rnorm(n1 * p), n1, p)) # continuous variables # linear predictor: eta1 <- theta[1] + as.matrix(X1) \\%*\\% theta[2:4] # inverse of the link function ( g^{-1}(\\eta) = \\mu ): mu1  <- gaussian()$linkinv(eta1) y1   <- rnorm(n1, mu1, sd = sqrt(theta[5]))  #----------------------------------- # Data simulation for local center 2 #----------------------------------- n2   <- 50                                       # sample size of center 2 X2   <- data.frame(matrix(rnorm(n2 * p), n2, p)) # continuous variables # linear predictor: eta2 <- theta[1] + as.matrix(X2) \\%*\\% theta[2:4] # inverse of the link function: mu2  <- gaussian()$linkinv(eta2) y2   <- rnorm(n2, mu2, sd = sqrt(theta[5]))  #--------------------- # Load the BFI package #--------------------- library(BFI)  #--------------------------- # Inverse Covariance Matrix #--------------------------- # Creating the inverse covariance matrix for the Gaussian prior distribution: Lambda <- inv.prior.cov(X1, lambda=0.05, family=gaussian) # the same for both centers  #-------------------------- # MAP estimates at center 1 #-------------------------- fit1       <- MAP.estimation(y1, X1, family=gaussian, Lambda) theta_hat1 <- fit1$theta_hat # intercept and coefficient estimates A_hat1     <- fit1$A_hat     # minus the curvature matrix  #-------------------------- # MAP estimates at center 2 #-------------------------- fit2       <- MAP.estimation(y2, X2, family=gaussian, Lambda) theta_hat2 <- fit2$theta_hat A_hat2     <- fit2$A_hat  #---------------------- # BFI at central center #---------------------- A_hats     <- list(A_hat1, A_hat2) theta_hats <- list(theta_hat1, theta_hat2) bfi        <- bfi(theta_hats, A_hats, Lambda) summary(bfi, cur_mat=TRUE)  #-------------------- # Stratified analysis #-------------------- # Stratified analysis when 'intercept' varies across two centers: newLambda1 <- inv.prior.cov(X1, lambda=c(0.1, 0.3), family=gaussian, stratified=TRUE, strat_par = 1) # 'newLambda1' is used the prior for combined data and 'Lambda' is used the prior for locals bfi1 <- bfi(theta_hats, A_hats, list(Lambda, newLambda1), stratified=TRUE, strat_par=1) summary(bfi1, cur_mat=TRUE)  # Stratified analysis when 'sigma2' varies across two centers: newLambda2 <- inv.prior.cov(X1, lambda=c(0.1, 0.3), family=gaussian, stratified=TRUE, strat_par = 2) # 'newLambda2' is used the prior for combined data and 'Lambda' is used the prior for locals bfi2 <- bfi(theta_hats, A_hats, list(Lambda, newLambda2), stratified=TRUE, strat_par=2) summary(bfi2, cur_mat=TRUE)  # Stratified analysis when 'intercept' and 'sigma2' vary across 2 centers: newLambda3 <- inv.prior.cov(X1, lambda=c(0.1, 0.2, 0.3), family=gaussian, stratified=TRUE, strat_par = c(1, 2)) # 'newLambda3' is used the prior for combined data and 'Lambda' is used the prior for locals bfi3 <- bfi(theta_hats, A_hats, list(Lambda, newLambda3), stratified=TRUE, strat_par=1:2) summary(bfi3, cur_mat=TRUE)"},{"path":"https://hassanpazira.github.io/BFI/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Bayesian Federated Inference","text":"cite BFI publications, please use:","code":"citation(\"BFI\")"},{"path":"https://hassanpazira.github.io/BFI/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Bayesian Federated Inference","text":"technical papers package: BFI Generalized Linear Models (GLMs) BFI Heterogeneous Populations BFI Survival Models","code":""},{"path":"https://hassanpazira.github.io/BFI/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Bayesian Federated Inference","text":"find errors, suggestions, like request something added, please file issue issue report send email : hassan.pazira@radboudumc.nl.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/BFI-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal BFI Functions — BFI-internal","title":"Internal BFI Functions — BFI-internal","text":"Internal BFI functions.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/BFI-internal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal BFI Functions — BFI-internal","text":"Hassan Pazira","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/BFI-internal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal BFI Functions — BFI-internal","text":"functions intended use users.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/BFI-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Federated Inference — BFI-package","title":"Bayesian Federated Inference — BFI-package","text":"Bayesian Federated Inference method combines inference results different (medical) centers without sharing data. version package, user can fit models specifying Gaussian Binomial (Logistic) families. package updated models soon.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/BFI-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian Federated Inference — BFI-package","text":"MAP.estimation bfi main functions. functions utility functions. examples provided vignettes accompanying package order show package can applied real data. vignettes can found package website https://hassanpazira.github.io/BFI/ within R package installed, e.g. via vignette(\"BFI\", package = \"BFI\").","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/BFI-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bayesian Federated Inference — BFI-package","text":"Hassan Pazira, Marianne . Jonker, Emanuele Massa, Anthony C.C. Coolen Maintainer: Hassan Pazira hassan.pazira@radboudumc.nl","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/BFI-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bayesian Federated Inference — BFI-package","text":"Jonker M.., Pazira H. Coolen .C.C. (2023). Bayesian Federated Inference Statistical Models, Statistics Medicine, 1-18. <https://onlinelibrary.wiley.com/doi/10.1002/sim.10072>","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/BFI.html","id":null,"dir":"Reference","previous_headings":"","what":"Bayesian Federated Inference — bfi","title":"Bayesian Federated Inference — bfi","text":"bfi function can used (central server) combine inference results separate data sets (without combining data) approximate inferred data sets merged. now function can handle linear logistic regression models, code models available near future. bfi command","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/BFI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bayesian Federated Inference — bfi","text":"","code":"bfi(theta_hats = NULL, A_hats, Lambda, stratified = FALSE,     strat_par = NULL, center_spec = NULL)"},{"path":"https://hassanpazira.github.io/BFI/reference/BFI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bayesian Federated Inference — bfi","text":"theta_hats list \\(L\\) vectors maximum posteriori (MAP) estimates model parameters \\(L\\) centers. vectors must equal dimensions. See ‘Details’. A_hats list \\(L\\) (minus) curvature matrices \\(L\\) centers. matrices must equal dimensions. See ‘Details’. Lambda list \\(L+1\\) matrices. \\(k^{\\th}\\) matrix chosen inverse variance-covariance matrix Gaussian distribution used prior distribution center \\(k\\), \\(k=1,2,\\ldots,L\\). last matrix chosen variance-covariance matrix Gaussian prior (fictive) combined data set. stratified = FALSE, \\(L+1\\) matrices must equal dimensions. , stratified = TRUE, first \\(L\\) matrices must equal dimensions last matrix different (greater) dimention others. See ‘Details’. stratified logical flag performing stratified analysis. stratified = TRUE, parameter(s) selected strat_par argument allowed different across centers, except argument center_spec NULL. Default stratified = FALSE. See ‘Details’ ‘Examples’. strat_par one- two-element integer vector indicating stratification parameter(s). values \\(1\\) /\\(2\\) /used indicate ``intercept'' /``sigma2'' allowed vary, respectively. argument used stratified = TRUE center_spec = NULL. Default strat_par = NULL, stratified = TRUE, strat_par can NULL unless center specific variable. binomial family length vector one refers ``intercept'', value element \\(1\\). gaussian family vector can \\(1\\) indicating ``intercept'' , \\(2\\) indicating ``sigma2'' , c(\\(1\\), \\(2\\)) ``intercept'' ``sigma2''. See ‘Details’ ‘Examples’. center_spec vector \\(L\\) elements representing center specific variable. argument used stratified = TRUE strat_par = NULL. element represents specific feature corresponding center. must one specific value attribute center. vector numeric, characteristic factor vector. Note , order centers vector center_spec must list argument theta_hats. used data type argument center_spec must categorical. Default center_spec = NULL. See also ‘Details’ ‘Examples’.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/BFI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bayesian Federated Inference — bfi","text":"bfi returns list containing following components: theta_hat vector estimates obtained combining inference results \\(L\\) centers 'BFI' methodology. intercept fitted every center stratified = FALSE, one general ``intercept'' vector, stratified = TRUE strat_par = 1, \\(L\\) different intercepts model, center one; A_hat minus curvature (Hessian) matrix obtained 'BFI' method combined model. stratified = TRUE, dimension matrix always greater stratified = FALSE; sd vector standard deviation estimates theta_hat obtained matrix A_hat, .e., vector equals sqrt(diag(solve(A_hat))) equals square root elements diagonal inverse A_hat matrix.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/BFI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bayesian Federated Inference — bfi","text":"bfi function implements BFI approach described paper Jonker et. al. (2023) given references. inference results gathered different (\\(L\\)) centers combined, BFI estimates model parameters curvature matrix evaluated point returned. inference result center must obtained using MAP.estimation function separately, results (coming different centers) compiled list used input bfi(). models different centers defined exactly way; among others, exactly covariates included models. parameter vectors defined exactly , \\(L\\) vectors matrices input lists theta_hat's A_hat's defined way (e.g., covariates need included models order). Note order elements lists theta_hats, A_hats Lambda, must respect centers, every list element \\(\\ell^{\\th}\\) position center \\(\\ell\\). also case vector center_spec. locations intercept = FALSE, stratified analysis possible anymore binomial family. stratified = FALSE, strat_par center_spec must NULL (defaults), stratified = TRUE one two must NULL. stratified = FALSE \\(L+1\\) matrices equal, sufficient give (list ) one matrix . cases stratified argument (TRUE FALSE), first \\(L\\) matrices equal, argument Lambda can list two matrices, fist matrix represents chosen variance-covariance matrix local centers second one chosen matrix combined data set. last matrix list argument Lambda can built function inv.prior.cov(). data type used argument center_spec continuous, one can use stratified = TRUE center_spec = NULL, set strat_par NULL (.e., \\(1\\), \\(2\\) \\((1, 2)\\)). Indeed, case, stratification parameter(s) given argument strat_par assumed different across centers.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/BFI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bayesian Federated Inference — bfi","text":"Jonker M.., Pazira H. Coolen .C.C. (2023). Bayesian Federated Inference Statistical Models. Statistics Medicine, Vol. 0(0), 0-0. <https://doi.org/10.48550/arXiv.2302.07677>","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/BFI.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bayesian Federated Inference — bfi","text":"Hassan Pazira Maintainer: Hassan Pazira hassan.pazira@radboudumc.nl","code":""},{"path":[]},{"path":"https://hassanpazira.github.io/BFI/reference/BFI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bayesian Federated Inference — bfi","text":"","code":"############################################### ##  Example 1:  y ~ Binomial  (L=2 centers)  ## ###############################################  #------------------ # Model Assumption: #------------------ beta <- 1:4  # regression coefficients (beta[1] is the intercept)  #----------------------------------- # Data Simulation for Local Center 1 #----------------------------------- n1 <- 30                                           # sample size of center 1 X1 <- data.frame(x1=rnorm(n1),                     # continuous variable                  x2=sample(0:2, n1, replace=TRUE)) # categorical variable # make dummy variables X1x2_1 <- ifelse(X1$x2 == '1', 1, 0) X1x2_2 <- ifelse(X1$x2 == '2', 1, 0) X1$x2  <- as.factor(X1$x2) # linear predictor: eta1   <- beta[1] + X1$x1 * beta[2] + X1x2_1 * beta[3] + X1x2_2 * beta[4] # inverse of the link function ( g^{-1}(\\eta) = \\mu ): mu1    <- binomial()$linkinv(eta1) y1     <- rbinom(n1, 1, mu1)  #----------------------------------- # Data Simulation for Local Center 2 #----------------------------------- n2 <- 50                                           # sample size of center 2 X2 <- data.frame(x1=rnorm(n2),                     # continuous variable                  x2=sample(0:2, n2, replace=TRUE)) # categorical variable # make dummy variables: X2x2_1 <- ifelse(X2$x2 == '1', 1, 0) X2x2_2 <- ifelse(X2$x2 == '2', 1, 0) X2$x2  <- as.factor(X2$x2) # linear predictor: eta2   <- beta[1] + X2$x1 * beta[2] + X2x2_1 * beta[3] + X2x2_2 * beta[4] # inverse of the link function: mu2    <- binomial()$linkinv(eta2) y2     <- rbinom(n2, 1, mu2)  #--------------------- # Load the BFI package #--------------------- library(BFI)  #-------------------------- # MAP Estimates at Center 1 #-------------------------- # assume the same inverse covariance matrix (Lambda) for both centers: Lambda     <- inv.prior.cov(X1, lambda=0.01, family=binomial) fit1       <- MAP.estimation(y1, X1, family=binomial, Lambda) theta_hat1 <- fit1$theta_hat # intercept and coefficient estimates A_hat1     <- fit1$A_hat     # minus the curvature matrix  #-------------------------- # MAP Estimates at Center 2 #-------------------------- fit2       <- MAP.estimation(y2, X2, family=binomial, Lambda) theta_hat2 <- fit2$theta_hat A_hat2     <- fit2$A_hat  #---------------------- # BFI at Central Center #---------------------- A_hats     <- list(A_hat1, A_hat2) theta_hats <- list(theta_hat1, theta_hat2) bfi        <- bfi(theta_hats, A_hats, Lambda) class(bfi) #> [1] \"bfi\" summary(bfi, cur_mat=TRUE) #>  #> Summary of the model: #>  #>     Family: ‘binomial’  #>       Link: ‘Logit’ #>  #> Coefficients: #>  #>             Estimate Std.Dev CI 2.5% CI 97.5% #> (Intercept)   1.5599  1.0176 -0.4345   3.5543 #> x1            2.1907  0.9217  0.3842   3.9973 #> x21           2.4232  1.3676 -0.2571   5.1036 #> x22           3.2543  1.7958 -0.2655   6.7741 #>  #> Dispersion parameter (sigma2):  1  #>  #> Minus the Curvature Matrix:  #>  #>             (Intercept)      x1     x21     x22 #> (Intercept)      3.9536 -4.3945  1.5990  1.2484 #> x1              -4.3945  7.1618 -1.7303 -2.2235 #> x21              1.5990 -1.7303  1.6090  0.0000 #> x22              1.2484 -2.2235  0.0000  1.2584  #-------------------- # Stratified Analysis #-------------------- # By running the following line an error appears because when stratified = TRUE, # both 'strat_par' and 'center_spec' can not be NULL: # bfi(theta_hats, A_hats, Lambda, stratified=TRUE)  # By running the following line an error appears because when stratified = TRUE, # last matrix in 'Lambda' should not have the same dim. as the other local matrices: # bfi(theta_hats, A_hats, Lambda, stratified=TRUE, strat_par=1)  # Stratified analysis when 'intercept' varies across two centers: newLam <- inv.prior.cov(X1, lambda=c(0.1, 0.3), family=binomial, stratified=TRUE,                            strat_par = 1) bfi <- bfi(theta_hats, A_hats, list(Lambda, newLam), stratified=TRUE, strat_par=1) summary(bfi, cur_mat=TRUE) #>  #> Summary of the model: #>  #>     Family: ‘binomial’  #>       Link: ‘Logit’ #>  #> Coefficients: #>  #>                  Estimate Std.Dev CI 2.5% CI 97.5% #> (Intercept)_loc1   2.0712  1.0573 -0.0011   4.1434 #> (Intercept)_loc2   1.1068  0.9730 -0.8002   3.0138 #> x1                 1.3602  0.7385 -0.0873   2.8077 #> x21                1.2690  1.0010 -0.6930   3.2309 #> x22                1.4196  1.2151 -0.9619   3.8011 #>  #> Dispersion parameter (sigma2):  1  #>  #> Minus the Curvature Matrix:  #>  #>                  (Intercept)_loc1 (Intercept)_loc2      x1     x21     x22 #> (Intercept)_loc1           2.1437           0.0000 -2.6067  0.8052  0.6389 #> (Intercept)_loc2           0.0000           2.0000 -1.7878  0.7938  0.6096 #> x1                        -2.6067          -1.7878  7.4518 -1.7303 -2.2235 #> x21                        0.8052           0.7938 -1.7303  1.8990  0.0000 #> x22                        0.6389           0.6096 -2.2235  0.0000  1.5484   ############################################### ##  Example 2:  y ~ Gaussian  (L=3 centers)  ## ###############################################  #------------------- # Model Assumptions: #------------------- p     <- 3                     # number of coefficients without 'intercept' theta <- c(1, rep(2, p), 1.5)  # reg. coefficients (theta[1] is 'intercept') & 'sigma2' = 1.5  #----------------------------------- # Data Simulation for Local Center 1 #----------------------------------- n1   <- 30                                       # sample size of center 1 X1   <- data.frame(matrix(rnorm(n1 * p), n1, p)) # continuous variables # linear predictor: eta1 <- theta[1] + as.matrix(X1) %*% theta[2:4] # inverse of the link function ( g^{-1}(\\eta) = \\mu ): mu1  <- gaussian()$linkinv(eta1) y1   <- rnorm(n1, mu1, sd = sqrt(theta[5]))  #----------------------------------- # Data Simulation for Local Center 2 #----------------------------------- n2   <- 40                                       # sample size of center 2 X2   <- data.frame(matrix(rnorm(n2 * p), n2, p)) # continuous variables # linear predictor: eta2 <- theta[1] + as.matrix(X2) %*% theta[2:4] # inverse of the link function: mu2  <- gaussian()$linkinv(eta2) y2   <- rnorm(n2, mu2, sd = sqrt(theta[5]))  #----------------------------------- # Data Simulation for Local Center 3 #----------------------------------- n3   <- 50                                       # sample size of center 3 X3   <- data.frame(matrix(rnorm(n3 * p), n3, p)) # continuous variables # linear predictor: eta3 <- theta[1] + as.matrix(X3) %*% theta[2:4] # inverse of the link function: mu3  <- gaussian()$linkinv(eta3) y3   <- rnorm(n3, mu3, sd = sqrt(theta[5]))  #--------------------------- # Inverse Covariance Matrix #--------------------------- # Creating the inverse covariance matrix for the Gaussian prior distribution: Lambda <- inv.prior.cov(X1, lambda=0.05, family=gaussian) # the same for both centers  #-------------------------- # MAP Estimates at Center 1 #-------------------------- fit1       <- MAP.estimation(y1, X1, family=gaussian, Lambda) theta_hat1 <- fit1$theta_hat # intercept and coefficient estimates A_hat1     <- fit1$A_hat     # minus the curvature matrix  #-------------------------- # MAP Estimates at Center 2 #-------------------------- fit2       <- MAP.estimation(y2, X2, family=gaussian, Lambda) theta_hat2 <- fit2$theta_hat A_hat2     <- fit2$A_hat  #-------------------------- # MAP Estimates at Center 3 #-------------------------- fit3       <- MAP.estimation(y3, X3, family=gaussian, Lambda) theta_hat3 <- fit3$theta_hat A_hat3     <- fit3$A_hat  #---------------------- # BFI at Central Center #---------------------- A_hats     <- list(A_hat1, A_hat2, A_hat3) theta_hats <- list(theta_hat1, theta_hat2, theta_hat3) bfi        <- bfi(theta_hats, A_hats, Lambda) summary(bfi, cur_mat=TRUE) #>  #> Summary of the model: #>  #>     Family: ‘gaussian’  #>       Link: ‘identity’ #>  #> Coefficients: #>  #>             Estimate Std.Dev CI 2.5% CI 97.5% #> (Intercept)   0.9630  0.0966  0.7736   1.1524 #> X1            2.1060  0.0935  1.9227   2.2893 #> X2            2.1721  0.0953  1.9853   2.3589 #> X3            2.0065  0.1118  1.7873   2.2257 #>  #> Dispersion parameter (sigma2):  1.22  #>  #> Minus the Curvature Matrix:  #>  #>             (Intercept)       X1       X2      X3   sigma2 #> (Intercept)    107.8308  -7.9603   0.9120  2.8864  -0.2830 #> X1              -7.9603 119.0443  -9.6101 16.0322  -0.6367 #> X2               0.9120  -9.6101 111.0724  2.7901  -0.6448 #> X3               2.8864  16.0322   2.7901 82.4112  -0.5986 #> sigma2          -0.2830  -0.6367  -0.6448 -0.5986 240.5888  #-------------------- # Stratified Analysis #-------------------- # Stratified analysis when 'intercept' varies across two centers: newLam1 <- inv.prior.cov(X1, lambda=c(0.1,0.3), family=gaussian, stratified=TRUE,                          strat_par = 1, L=3) # 'newLam1' is used the prior for combined data and 'Lambda' is used the prior for locals bfi1 <- bfi(theta_hats, A_hats, list(Lambda, newLam1), stratified=TRUE, strat_par=1) summary(bfi1, cur_mat=TRUE) #>  #> Summary of the model: #>  #>     Family: ‘gaussian’  #>       Link: ‘identity’ #>  #> Coefficients: #>  #>                  Estimate Std.Dev CI 2.5% CI 97.5% #> (Intercept)_loc1   1.1385  0.1578  0.8293   1.4477 #> (Intercept)_loc2   1.0103  0.1690  0.6790   1.3416 #> (Intercept)_loc3   0.6840  0.1794  0.3324   1.0357 #> X1                 2.1335  0.0955  1.9463   2.3207 #> X2                 2.1722  0.0954  1.9853   2.3592 #> X3                 1.9963  0.1121  1.7766   2.2160 #>  #> Dispersion parameter (sigma2):  1.218  #>  #> Minus the Curvature Matrix:  #>  #>                  (Intercept)_loc1 (Intercept)_loc2 (Intercept)_loc3       X1 #> (Intercept)_loc1          40.3865           0.0000           0.0000  -4.5458 #> (Intercept)_loc2           0.0000          36.1813           0.0000 -10.3343 #> (Intercept)_loc3           0.0000           0.0000          31.5129   6.9198 #> X1                        -4.5458         -10.3343           6.9198 119.0943 #> X2                         1.7993          -1.1946           0.3073  -9.6101 #> X3                         0.4537           2.7545          -0.3218  16.0322 #> sigma2                    -0.1117          -0.1026          -0.0687  -0.6367 #>                        X2      X3   sigma2 #> (Intercept)_loc1   1.7993  0.4537  -0.1117 #> (Intercept)_loc2  -1.1946  2.7545  -0.1026 #> (Intercept)_loc3   0.3073 -0.3218  -0.0687 #> X1                -9.6101 16.0322  -0.6367 #> X2               111.1224  2.7901  -0.6448 #> X3                 2.7901 82.4612  -0.5986 #> sigma2            -0.6448 -0.5986 240.8388  # Stratified analysis when 'sigma2' varies across two centers: newLam2 <- inv.prior.cov(X1, lambda=c(0.1,0.3), family=gaussian, stratified=TRUE,                          strat_par = 2, L=3) # 'newLam2' is used the prior for combined data and 'Lambda' is used the prior for locals bfi2 <- bfi(theta_hats, A_hats, list(Lambda, newLam2), stratified=TRUE, strat_par=2) summary(bfi2, cur_mat=TRUE) #>  #> Summary of the model: #>  #>     Family: ‘gaussian’  #>       Link: ‘identity’ #>  #> Coefficients: #>  #>             Estimate Std.Dev CI 2.5% CI 97.5% #> (Intercept)   0.9622  0.0966  0.7728   1.1515 #> X1            2.1048  0.0935  1.9215   2.2880 #> X2            2.1706  0.0953  1.9838   2.3573 #> X3            2.0050  0.1118  1.7859   2.2241 #> sigma2_loc1   0.7406  0.1287  0.4884   0.9928 #> sigma2_loc2   1.1053  0.1115  0.8868   1.3238 #>  #> Dispersion parameter (sigma2):  1.588  #>  #> Minus the Curvature Matrix:  #>  #>             (Intercept)       X1       X2      X3 sigma2_loc1 sigma2_loc2 #> (Intercept)    107.8808  -7.9603   0.9120  2.8864     -0.1117     -0.1026 #> X1              -7.9603 119.0943  -9.6101 16.0322     -0.2029     -0.2187 #> X2               0.9120  -9.6101 111.1224  2.7901     -0.2355     -0.2056 #> X3               2.8864  16.0322   2.7901 82.4612     -0.2082     -0.1956 #> sigma2_loc1     -0.1117  -0.2029  -0.2355 -0.2082     60.3987      0.0000 #> sigma2_loc2     -0.1026  -0.2187  -0.2056 -0.1956      0.0000     80.4718 #> sigma2_loc3     -0.0687  -0.2151  -0.2038 -0.1949      0.0000      0.0000 #>             sigma2_loc3 #> (Intercept)     -0.0687 #> X1              -0.2151 #> X2              -0.2038 #> X3              -0.1949 #> sigma2_loc1      0.0000 #> sigma2_loc2      0.0000 #> sigma2_loc3    100.5683  # Stratified analysis when 'intercept' and 'sigma2' vary across 2 centers: newLam3 <- inv.prior.cov(X1, lambda=c(0.1,0.2,0.3), family=gaussian, stratified=TRUE,                          strat_par = c(1, 2), L=3) # 'newLam3' is used the prior for combined data and 'Lambda' is used the prior for locals bfi3 <- bfi(theta_hats, A_hats, list(Lambda, newLam3), stratified=TRUE, strat_par=1:2) summary(bfi3, cur_mat=TRUE) #>  #> Summary of the model: #>  #>     Family: ‘gaussian’  #>       Link: ‘identity’ #>  #> Coefficients: #>  #>                  Estimate Std.Dev CI 2.5% CI 97.5% #> (Intercept)_loc1   1.1371  0.1577  0.8279   1.4462 #> (Intercept)_loc2   1.0095  0.1684  0.6793   1.3396 #> (Intercept)_loc3   0.6853  0.1794  0.3337   1.0369 #> X1                 2.1313  0.0953  1.9445   2.3181 #> X2                 2.1696  0.0952  1.9830   2.3562 #> X3                 1.9939  0.1118  1.7748   2.2129 #> sigma2_loc1        0.7409  0.1287  0.4888   0.9931 #> sigma2_loc2        1.1054  0.1115  0.8869   1.3239 #>  #> Dispersion parameter (sigma2):  1.588  #>  #> Minus the Curvature Matrix:  #>  #>                  (Intercept)_loc1 (Intercept)_loc2 (Intercept)_loc3       X1 #> (Intercept)_loc1          40.3865           0.0000           0.0000  -4.5458 #> (Intercept)_loc2           0.0000          36.1813           0.0000 -10.3343 #> (Intercept)_loc3           0.0000           0.0000          31.5129   6.9198 #> X1                        -4.5458         -10.3343           6.9198 119.1943 #> X2                         1.7993          -1.1946           0.3073  -9.6101 #> X3                         0.4537           2.7545          -0.3218  16.0322 #> sigma2_loc1               -0.1117           0.0000           0.0000   1.7993 #> sigma2_loc2                0.0000          -0.1026           0.0000  -1.1946 #> sigma2_loc3                0.0000           0.0000          -0.0687   0.3073 #>                        X2      X3 sigma2_loc1 sigma2_loc2 sigma2_loc3 #> (Intercept)_loc1   0.4537 -0.2355     -0.1117      0.0000      0.0000 #> (Intercept)_loc2   2.7545 -0.2056      0.0000     -0.1026      0.0000 #> (Intercept)_loc3  -0.3218 -0.2038      0.0000      0.0000     -0.0687 #> X1                -9.6101 16.0322     -0.2029     -0.2187     -0.2151 #> X2               111.2224  2.7901     -0.2355     -0.2056     -0.2038 #> X3                 2.7901 82.5612     -0.2082     -0.1956     -0.1949 #> sigma2_loc1       -0.2029 -0.2082     60.3987      0.0000      0.0000 #> sigma2_loc2       -0.2187 -0.1956      0.0000     80.4718      0.0000 #> sigma2_loc3       -0.2151 -0.1949      0.0000      0.0000    100.5683  #--------------------------- # Center Specific Covariates #--------------------------- # Assume the first and third centers have the same center-specific covariate value of '3', # while this value for the second center is '1', i.e., center_spec = c(3,1,3) newLam4 <- inv.prior.cov(X1, lambda=c(0.1, 0.2, 0.3), family=gaussian, stratified=TRUE,                          center_spec = c(3,1,3), L=3) # 'newLam4' is used the prior for combined data and 'Lambda' is used the prior for locals bfi4 <- bfi(theta_hats, A_hats, list(Lambda, newLam4), stratified=TRUE, center_spec = c(3,1,3)) summary(bfi4, cur_mat=TRUE) #>  #> Summary of the model: #>  #>     Family: ‘gaussian’  #>       Link: ‘identity’ #>  #> Coefficients: #>  #>               Estimate Std.Dev CI 2.5% CI 97.5% #> (Intercept)_1   1.0025  0.1690  0.6713   1.3337 #> (Intercept)_3   0.9415  0.1181  0.7101   1.1730 #> X1              2.1078  0.0946  1.9223   2.2932 #> X2              2.1703  0.0953  1.9835   2.3572 #> X3              2.0013  0.1120  1.7818   2.2208 #>  #> Dispersion parameter (sigma2):  1.218  #>  #> Minus the Curvature Matrix:  #>  #>               (Intercept)_1 (Intercept)_3       X1       X2      X3   sigma2 #> (Intercept)_1       36.1813        0.0000 -10.3343  -1.1946  2.7545  -0.1026 #> (Intercept)_3        0.0000       71.7995   2.3740   2.1066  0.1319  -0.1804 #> X1                 -10.3343        2.3740 119.1943  -9.6101 16.0322  -0.6367 #> X2                  -1.1946        2.1066  -9.6101 111.2224  2.7901  -0.6448 #> X3                   2.7545        0.1319  16.0322   2.7901 82.5612  -0.5986 #> sigma2              -0.1026       -0.1804  -0.6367  -0.6448 -0.5986 240.8388"},{"path":"https://hassanpazira.github.io/BFI/reference/MAP.estimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum A Posteriori estimation — MAP.estimation","title":"Maximum A Posteriori estimation — MAP.estimation","text":"MAP.estimation function used (local centers) compute Maximum Posterior (MAP) estimators parameters GLM soon Survival models.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/MAP.estimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum A Posteriori estimation — MAP.estimation","text":"","code":"MAP.estimation(y, X, family = gaussian, Lambda, intercept = TRUE,                initial = NULL, control = list())"},{"path":"https://hassanpazira.github.io/BFI/reference/MAP.estimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum A Posteriori estimation — MAP.estimation","text":"y response vector. binomial family used, argument vector entries 0 (failure) 1 (success). Alternatively, response can matrix first column number “successes” second column number “failures”. X design matrix dimension \\(n \\times p\\), \\(p\\) number covariables predictors. family description error distribution link function used specify model. can character string naming family function result call family function (see family details). current version package, family model can gaussian (identity link function) binomial (logit link function). default gaussian family used. case linear regression model, family = gaussian, extra model parameter variance measurement error. Lambda inverse variance-covariance matrix Gaussian distribution used prior distribution model parameters. dimension matrix depends number columns X, type covariates (continuous / dichotomous categorical), family, intercept. However, Lambda can easily created inv.prior.cov(). intercept logical flag fitting intercept. intercept=TRUE (default), intercept fitted, .e., included model, intercept=FALSE set zero, .e., model. initial vector specifying initial values parameters optimized . length initial equal number model parameters thus, equal number rows columns Lambda. Since 'L-BFGS-B' method used algorithm, values always finite. Default vector zeros. control list control parameters. See ‘Details’.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/MAP.estimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum A Posteriori estimation — MAP.estimation","text":"MAP.estimation returns list containing following components: theta_hat vector corresponding maximum posteriori (MAP) estimates parameters; A_hat minus curvature (Hessian) matrix around point theta_hat. dimension matrix argument Lambda; sd vector standard deviation MAP estimates theta_hat, sqrt(diag(solve(A_hat))); Lambda inverse variance-covariance matrix Gaussian distribution used prior distribution parameters. exactly argument Lambda; formula formula applied; names names model parameters; n sample size; np number coefficients; value value minus log-likelihood posterior density evaluated theta_hat; family family object used.; intercept logical flag used fit intercept TRUE, set zero FALSE; convergence integer value used encode warnings errors related algorithm used fit model. values returned : 0 algorithm converged; 1 maximum number iterations ('maxit') reached; 2 Warning 'L-BFGS-B' method. See message value; control list control parameters used compute MAP estimates.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/MAP.estimation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maximum A Posteriori estimation — MAP.estimation","text":"MAP.estimation function finds Maximum Posteriori (MAP) estimates model parameters maximizing log-posterior density respect parameters, .e., estimates equal values log-posterior density maximal (posterior mode). words, MAP.estimation() optimizes log-posterior density respect parameter vector obtain MAP estimates. addition model parameters, .e., coefficients (\\({\\beta}\\)'s) variance error (\\(\\sigma^2_e\\)), curvature matrix (Hessian log-posterior) estimated around mode. MAP.estimation function returns object class `bfi`. Therefore, summary() can used object returned MAP.estimation(). solve unconstrained bound-constrained optimization problems, MAP.estimation function utilizes optimization algorithm called Limited-memory Broyden-Fletcher-Goldfarb-Shanno Bound Constraints (L-BFGS-B), Byrd et. al. (1995). L-BFGS-B algorithm limited-memory “quasi-Newton” method iteratively updates parameter estimates approximating inverse Hessian matrix using gradient information history previous iterations. approach allows algorithm approximate curvature posterior distribution efficiently search optimal solution, makes computationally efficient problems large number variables. default, algorithm uses relative change objective function convergence criterion. change objective function iterations falls certain threshold (`factr`) algorithm considered converged. convergence can checked argument convergence output. See ‘Value’. case convergence issue, may necessary investigate adjust optimization parameters facilitate convergence. can done using initial control arguments. argument initial initial points interative optimization algorithm can changed, argument control list can supply following components: maxit: maximum number iterations. Default 100; factr: controls convergence 'L-BFGS-B' method. Convergence occurs reduction objective within factor machine tolerance. Default factr 1e7, gives tolerance 1e-9. exact tolerance can checked multiplying value .Machine$double.eps; pgtol: helps control convergence 'L-BFGS-B' method. tolerance projected gradient current search direction, .e., iteration stop maximum component projected gradient less equal pgtol, pgtol\\(\\geq 0\\). Default zero, check suppressed; trace: non-negative integer. positive, tracing information progress optimization produced. Higher values may produce tracing information: method 'L-BFGS-B' six levels tracing. understand exactly see source code optim function stats package; REPORT: frequency reports 'L-BFGS-B' method 'control$trace' positive. Default every 10 iterations; lmm: integer giving number BFGS updates retained 'L-BFGS-B' method. Default 5.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/MAP.estimation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Maximum A Posteriori estimation — MAP.estimation","text":"Jonker M.., Pazira H. Coolen .C.C. (2023). Bayesian Federated Inference Statistical Models. Statistics Medicine, Vol. 0(0), 0-0. <https://doi.org/10.48550/arXiv.2302.07677> Byrd R.H., Lu P., Nocedal J. Zhu C. (1995). limited memory algorithm bound constrained optimization. SIAM Journal Scientific Computing, 16, 1190-1208. <https://doi.org/10.1137/0916069>","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/MAP.estimation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Maximum A Posteriori estimation — MAP.estimation","text":"Hassan Pazira Maintainer: Hassan Pazira hassan.pazira@radboudumc.nl","code":""},{"path":[]},{"path":"https://hassanpazira.github.io/BFI/reference/MAP.estimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum A Posteriori estimation — MAP.estimation","text":"","code":"#------------- # y ~ Gaussian #------------- # model assumption: theta <- c(1, 2, 2, 2, 1.5)  # model parameters: coefficients and sigma2 = 1.5  #---------------- # Data Simulation #---------------- n   <- 30   # sample size p   <- 3    # number of coefficients without intercept X   <- data.frame(matrix(rnorm(n * p), n, p)) # continuous variables # linear predictor: eta <- theta[1] + theta[2] * X$X1 + theta[3] * X$X2 + theta[4] * X$X3 # inverse of the link function ( g^{-1}(\\eta) = \\mu ): mu  <- gaussian()$linkinv(eta) y   <- rnorm(n, mu, sd = sqrt(theta[5]))  #--------------------- # Load the BFI package #--------------------- library(BFI)  #----------------------------------------------- # MAP estimations for theta and curvature matrix #----------------------------------------------- # MAP estimates with 'intercept' Lambda <- inv.prior.cov(X, lambda = c(0.1, 1), family = gaussian) (fit <- MAP.estimation(y, X, family = gaussian, Lambda)) #> $theta_hat #> (Intercept)          X1          X2          X3      sigma2  #>   1.1591246   1.6003702   1.8282461   1.9027500   0.8508258  #>  #> $A_hat #>             (Intercept)         X1         X2         X3     sigma2 #> (Intercept)  35.3598601  1.9013527  9.2180417  6.1062432 -0.2318347 #> X1            1.9013527 30.2009695 -3.0303311  3.7691543 -0.3200598 #> X2            9.2180417 -3.0303311 32.1748387 12.4692692 -0.3656483 #> X3            6.1062432  3.7691543 12.4692692 41.6289644 -0.3805704 #> sigma2       -0.2318347 -0.3200598 -0.3656483 -0.3805704 63.4032548 #>  #> $sd #> (Intercept)          X1          X2          X3      sigma2  #>   0.1758379   0.1854763   0.1954006   0.1670235   0.1255963  #>  #> $Lambda #>             (Intercept)  X1  X2  X3 sigma2 #> (Intercept)         0.1 0.0 0.0 0.0      0 #> X1                  0.0 0.1 0.0 0.0      0 #> X2                  0.0 0.0 0.1 0.0      0 #> X3                  0.0 0.0 0.0 0.1      0 #> sigma2              0.0 0.0 0.0 0.0      1 #>  #> $formula #> [1] y ~ X1 + X2 + X3 #>  #> $names #> [1] \"(Intercept)\" \"X1\"          \"X2\"          \"X3\"          \"sigma2\"      #>  #> $n #> [1] 30 #>  #> $np #> [1] 4 #>  #> $value #> [1] 27.94196 #>  #> $family #> [1] \"gaussian\" #>  #> $intercept #> [1] TRUE #>  #> $convergence #> [1] 0 #>  #> $control #> list() #>  #> attr(,\"class\") #> [1] \"bfi\" class(fit) #> [1] \"bfi\" summary(fit, cur_mat = TRUE) #>  #> Summary of the model: #>  #>    Formula: y ~ X1 + X2 + X3  #>     Family: ‘gaussian’  #>       Link: ‘identity’ #>  #> Coefficients: #>  #>             Estimate Std.Dev CI 2.5% CI 97.5% #> (Intercept)   1.1591  0.1758  0.8145   1.5038 #> X1            1.6004  0.1855  1.2368   1.9639 #> X2            1.8282  0.1954  1.4453   2.2112 #> X3            1.9028  0.1670  1.5754   2.2301 #>  #> Dispersion parameter (sigma2):  0.8508  #>             log Lik Posterior:  -27.94  #>                   Convergence:  0  #>  #> Minus the Curvature Matrix:  #>  #>             (Intercept)      X1      X2      X3  sigma2 #> (Intercept)     35.3599  1.9014  9.2180  6.1062 -0.2318 #> X1               1.9014 30.2010 -3.0303  3.7692 -0.3201 #> X2               9.2180 -3.0303 32.1748 12.4693 -0.3656 #> X3               6.1062  3.7692 12.4693 41.6290 -0.3806 #> sigma2          -0.2318 -0.3201 -0.3656 -0.3806 63.4033  # MAP estimates without 'intercept' Lambda <- inv.prior.cov(X, lambda = c(0.1, 1), family = gaussian, intercept = FALSE) (fit1 <- MAP.estimation(y, X, family = gaussian, Lambda, intercept = FALSE)) #> $theta_hat #>       X1       X2       X3   sigma2  #> 1.688770 2.135141 1.966599 1.976128  #>  #> $A_hat #>                X1         X2         X3     sigma2 #> X1     13.0600318 -1.3047150  1.6228168 -0.3378539 #> X2     -1.3047150 13.9098851  5.3686685 -0.4269553 #> X3      1.6228168  5.3686685 17.9803776 -0.3932365 #> sigma2 -0.3378539 -0.4269553 -0.3932365 67.9058777 #>  #> $sd #>        X1        X2        X3    sigma2  #> 0.2811424 0.2879902 0.2535232 0.1213750  #>  #> $Lambda #>         X1  X2  X3 sigma2 #> X1     0.1 0.0 0.0      0 #> X2     0.0 0.1 0.0      0 #> X3     0.0 0.0 0.1      0 #> sigma2 0.0 0.0 0.0      1 #>  #> $formula #> [1] y ~ X1 + X2 + X3 #>  #> $names #> [1] \"X1\"     \"X2\"     \"X3\"     \"sigma2\" #>  #> $n #> [1] 30 #>  #> $np #> [1] 3 #>  #> $value #> [1] 55.51495 #>  #> $family #> [1] \"gaussian\" #>  #> $intercept #> [1] FALSE #>  #> $convergence #> [1] 0 #>  #> $control #> list() #>  #> attr(,\"class\") #> [1] \"bfi\" summary(fit1, cur_mat = TRUE) #>  #> Summary of the model: #>  #>    Formula: y ~ X1 + X2 + X3  #>     Family: ‘gaussian’  #>       Link: ‘identity’ #>  #> Coefficients: #>  #>    Estimate Std.Dev CI 2.5% CI 97.5% #> X1   1.6888  0.2811  1.1377   2.2398 #> X2   2.1351  0.2880  1.5707   2.6996 #> X3   1.9666  0.2535  1.4697   2.4635 #>  #> Dispersion parameter (sigma2):  1.976  #>             log Lik Posterior:  -55.51  #>                   Convergence:  0  #>  #> Minus the Curvature Matrix:  #>  #>             X1      X2      X3  sigma2 #> X1     13.0600 -1.3047  1.6228 -0.3379 #> X2     -1.3047 13.9099  5.3687 -0.4270 #> X3      1.6228  5.3687 17.9804 -0.3932 #> sigma2 -0.3379 -0.4270 -0.3932 67.9059"},{"path":"https://hassanpazira.github.io/BFI/reference/Nurses.html","id":null,"dir":"Reference","previous_headings":"","what":"Nurses' stress in different hospitals — Nurses","title":"Nurses' stress in different hospitals — Nurses","text":"dataset comprises three-level simulated data extracted hypothetical study investigating stress levels within hospital settings. dataset focuses nurses working specific wards within various hospitals. includes several variables, nurse age (measured years), nurse experience (measured years), nurse gender (0 male, 1 female), ward type (0 general care, 1 special care), hospital size (0 small, 1 medium, 2 large). dataset package obtained original dataset leaving unused columns.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/Nurses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nurses' stress in different hospitals — Nurses","text":"","code":"data(Nurses)"},{"path":"https://hassanpazira.github.io/BFI/reference/Nurses.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Nurses' stress in different hospitals — Nurses","text":"https://multilevel-analysis.sites.uu.nl/datasets/","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/Nurses.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Nurses' stress in different hospitals — Nurses","text":"Hox, J., Moerbeek, M., van de Schoot, R. (2010). Multilevel Analysis: Techniques Applications, Second Edition (2nd ed.). Routledge. <https://doi.org/10.4324/9780203852279>","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/inv.prior.cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an inverse covariance matrix for a Gaussian prior — inv.prior.cov","title":"Creates an inverse covariance matrix for a Gaussian prior — inv.prior.cov","text":"inv.prior.cov builds diagonal inverse covariance matrix Gaussian prior distribution based design matrix covariates, takes account number regression parameters case categorical covariates.  case linear model, also includes row column variance measurement errors.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/inv.prior.cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an inverse covariance matrix for a Gaussian prior — inv.prior.cov","text":"","code":"inv.prior.cov(X, lambda = 1, L = 2, family = gaussian, intercept = TRUE,               stratified = FALSE, strat_par = NULL, center_spec = NULL)"},{"path":"https://hassanpazira.github.io/BFI/reference/inv.prior.cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an inverse covariance matrix for a Gaussian prior — inv.prior.cov","text":"X design matrix dimension \\(n \\times p\\), \\(n\\) number samples observed, \\(p\\) number predictors/variables excluding intercept. lambda vector used diagonal (inverse covariance) matrix created inv.prior.cov(). length vector depends number columns X, type covariates (continuous/dichotomous categorical), family, whether intercept included model, whether stratified analysis desired. stratified = FALSE, lambda single positive number (values vector equal), vector two elements (first used regression parameters including ``intercept'' second ``sigma2''), vector length equal number model parameters. However, length lambda different stratified = TRUE, see ‘Details’ information. Default lambda = 1. L number centers. argument used stratified = TRUE. Default L = 2. See ‘Details’ ‘Examples’. family description error distribution link function used specify model. can character string naming family function result call family function (see family details). current version, family model can gaussian (identity link function) binomial (logit link function). default gaussian family used. case linear regression model, family = gaussian, extra model parameter variance measurement error. intercept logical flag intercept. changing intercept dimension inverse covariance matrix changes. intercept = TRUE (default), output matrix created inv.prior.cov() one row one column related intercept, intercept = FALSE, resulting matrix row column called intercept. stratified logical flag performing stratified analysis. stratified = TRUE, parameter(s) selected strat_par argument allowed different across centers. argument used designing inverse covariance matrix (fictive) combined data, .e., last matrix Lambda argument bfi(). inv.prior.cov() used analysis local centers (built \\(L\\) first matrices Lambda argument bfi()), argument FALSE, even BFI analysis stratified. Default stratified = FALSE. See ‘Details’ ‘Examples’. strat_par one- two-element integer vector indicating stratification parameter(s). values \\(1\\) /\\(2\\) /used indicate ``intercept'' /``sigma2'' allowed vary, respectively. argument used stratified = TRUE. Default strat_par = NULL, stratified = TRUE, strat_par can NULL. binomial family length vector one refers ``intercept'', value element \\(1\\). gaussian vector can \\(1\\) indicating ``intercept'' , \\(2\\) indicating ``sigma2'' , c(\\(1\\), \\(2\\)) ``intercept'' ``sigma2''. See ‘Examples’. center_spec vector \\(L\\) elements representing center specific variable. argument used stratified = TRUE strat_par = NULL. element represents specific feature corresponding center. must one specific value attribute center. vector numeric, characteristic factor vector. Note , order centers vector center_spec must list argument theta_hats function bfi(). used data type argument center_spec must categorical. Default center_spec = NULL. See also ‘Details’ ‘Examples’.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/inv.prior.cov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates an inverse covariance matrix for a Gaussian prior — inv.prior.cov","text":"inv.prior.cov creates diagonal matrix vector lambda diagonal. argument stratified = TRUE used construct matrix prior density case stratification fictive combined data. Never used construction matrix analysis centers. stratified = FALSE, length vector lambda depends covariate matrix X, family, whether ``intercept'' included model. example, design matrix X p columns continuous dichotomous covariates, family = gaussian, intercept = TRUE, lambda \\(p+2\\) elements. case, X categorical covariate \\(q>2\\) categories, length lambda increases \\(q-2\\). values lambda non-negative represent inverse variance Gaussian prior. Note , values vector lambda equal, one value enough given entry. lambda scalar, function inv.prior.cov sets value diagonal equal lambda. linear regression model last parameter assumed inverse variance prior distribution measurement error. lambda two dimensional, first value used prior regression parameters second inverse variance prior distribution measurement error. stratified = TRUE length vector lambda equal number parameters combined model. intercept = FALSE, binomial family stratified analysis possible therefore stratified can TRUE. stratified = FALSE, strat_par center_spec must NULL (defaults), stratified = TRUE one two must NULL. output inv.prior.cov() can used main functions MAP.estimation() bfi().","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/inv.prior.cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates an inverse covariance matrix for a Gaussian prior — inv.prior.cov","text":"inv.prior.cov returns diagonal matrix. dimension matrix depends number columns X, type covariates (continuous/dichotomous categorical), family, intercept.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/inv.prior.cov.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Creates an inverse covariance matrix for a Gaussian prior — inv.prior.cov","text":"Jonker M.., Pazira H. Coolen .C.C. (2023). Bayesian Federated Inference Statistical Models, Statistics Medicine, Vol. 0(0), 0-0. <https://doi.org/10.48550/arXiv.2302.07677>","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/inv.prior.cov.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates an inverse covariance matrix for a Gaussian prior — inv.prior.cov","text":"Hassan Pazira Maintainer: Hassan Pazira hassan.pazira@radboudumc.nl","code":""},{"path":[]},{"path":"https://hassanpazira.github.io/BFI/reference/inv.prior.cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates an inverse covariance matrix for a Gaussian prior — inv.prior.cov","text":"","code":"#---------------- # Data Simulation #---------------- X <- data.frame(x1=rnorm(50),                     # standard normal variable                 x2=sample(0:2, 50, replace=TRUE), # categorical variable                 x3=sample(0:1, 50, replace=TRUE)) # dichotomous variable X$x2 <- as.factor(X$x2) X$x3 <- as.factor(X$x3)  #--------------------- # Load the BFI package #--------------------- library(BFI)  # The (inverse) variance value (lambda=0.05) is assumed to be # the same for Gaussian prior of all parameters (for non-stratified)  #------------------------------------------------- # Inverse Covariance Matrix for the Gaussian prior #------------------------------------------------- # y ~ Binomial with 'intercept' inv.prior.cov(X, lambda=0.05, family=binomial) # returns a 5-by-5 matrix #>             (Intercept)   x1  x21  x22  x31 #> (Intercept)        0.05 0.00 0.00 0.00 0.00 #> x1                 0.00 0.05 0.00 0.00 0.00 #> x21                0.00 0.00 0.05 0.00 0.00 #> x22                0.00 0.00 0.00 0.05 0.00 #> x31                0.00 0.00 0.00 0.00 0.05  # y ~ Binomial without 'intercept' inv.prior.cov(X, lambda=0.05, family=\"binomial\", intercept = FALSE) # a 4-by-4 matrix #>       x1  x21  x22  x31 #> x1  0.05 0.00 0.00 0.00 #> x21 0.00 0.05 0.00 0.00 #> x22 0.00 0.00 0.05 0.00 #> x31 0.00 0.00 0.00 0.05  # y ~ Gaussian with 'intercept' inv.prior.cov(X, lambda=0.05, family=gaussian) # returns a 6-by-6 matrix #>             (Intercept)   x1  x21  x22  x31 sigma2 #> (Intercept)        0.05 0.00 0.00 0.00 0.00   0.00 #> x1                 0.00 0.05 0.00 0.00 0.00   0.00 #> x21                0.00 0.00 0.05 0.00 0.00   0.00 #> x22                0.00 0.00 0.00 0.05 0.00   0.00 #> x31                0.00 0.00 0.00 0.00 0.05   0.00 #> sigma2             0.00 0.00 0.00 0.00 0.00   0.05  #-------------------- # Stratified analysis #-------------------- # y ~ Binomial when 'intercept' varies across 3 centers: inv.prior.cov(X, lambda=c(.2, 1), family=binomial, stratified=TRUE, strat_par = 1, L = 3) #>                  (Intercept)_loc1 (Intercept)_loc2 (Intercept)_loc3 x1 x21 x22 #> (Intercept)_loc1              0.2              0.0              0.0  0   0   0 #> (Intercept)_loc2              0.0              0.2              0.0  0   0   0 #> (Intercept)_loc3              0.0              0.0              0.2  0   0   0 #> x1                            0.0              0.0              0.0  1   0   0 #> x21                           0.0              0.0              0.0  0   1   0 #> x22                           0.0              0.0              0.0  0   0   1 #> x31                           0.0              0.0              0.0  0   0   0 #>                  x31 #> (Intercept)_loc1   0 #> (Intercept)_loc2   0 #> (Intercept)_loc3   0 #> x1                 0 #> x21                0 #> x22                0 #> x31                1  # y ~ Gaussian when 'intercept' and 'sigma2' vary across 2 centers; y ~ Gaussian inv.prior.cov(X, lambda=c(1, 2, 3), family=gaussian, stratified=TRUE, strat_par = c(1, 2)) #>                  (Intercept)_loc1 (Intercept)_loc2 x1 x21 x22 x31 sigma2_loc1 #> (Intercept)_loc1                1                0  0   0   0   0           0 #> (Intercept)_loc2                0                1  0   0   0   0           0 #> x1                              0                0  2   0   0   0           0 #> x21                             0                0  0   2   0   0           0 #> x22                             0                0  0   0   2   0           0 #> x31                             0                0  0   0   0   2           0 #> sigma2_loc1                     0                0  0   0   0   0           3 #> sigma2_loc2                     0                0  0   0   0   0           0 #>                  sigma2_loc2 #> (Intercept)_loc1           0 #> (Intercept)_loc2           0 #> x1                         0 #> x21                        0 #> x22                        0 #> x31                        0 #> sigma2_loc1                0 #> sigma2_loc2                3  # y ~ Gaussian when 'sigma2' varies across 2 centers (with 'intercept') inv.prior.cov(X, lambda=c(1, 2, 3), family=gaussian, stratified=TRUE, strat_par = 2) #>             (Intercept) x1 x21 x22 x31 sigma2_loc1 sigma2_loc2 #> (Intercept)           1  0   0   0   0           0           0 #> x1                    0  2   0   0   0           0           0 #> x21                   0  0   2   0   0           0           0 #> x22                   0  0   0   2   0           0           0 #> x31                   0  0   0   0   2           0           0 #> sigma2_loc1           0  0   0   0   0           3           0 #> sigma2_loc2           0  0   0   0   0           0           3  # y ~ Gaussian when 'sigma2' varies across 2 centers (without 'intercept') inv.prior.cov(X, lambda=c(2, 3), family=gaussian, intercept = FALSE, stratified=TRUE,               strat_par = 2) #>             x1 x21 x22 x31 sigma2_loc1 sigma2_loc2 #> x1           2   0   0   0           0           0 #> x21          0   2   0   0           0           0 #> x22          0   0   2   0           0           0 #> x31          0   0   0   2           0           0 #> sigma2_loc1  0   0   0   0           3           0 #> sigma2_loc2  0   0   0   0           0           3  #-------------------------- # Center specific covariate #-------------------------- # center specific covariate has K=2 categories across 4 centers; y ~ Binomial inv.prior.cov(X, lambda=c(0.1:2), family=binomial, stratified=TRUE,               center_spec = c(\"Iran\",\"Netherlands\",\"Netherlands\",\"Iran\"), L=4) #>                         (Intercept)_Iran (Intercept)_Netherlands  x1 x21 x22 #> (Intercept)_Iran                     0.1                     0.0 0.0 0.0 0.0 #> (Intercept)_Netherlands              0.0                     0.1 0.0 0.0 0.0 #> x1                                   0.0                     0.0 1.1 0.0 0.0 #> x21                                  0.0                     0.0 0.0 1.1 0.0 #> x22                                  0.0                     0.0 0.0 0.0 1.1 #> x31                                  0.0                     0.0 0.0 0.0 0.0 #>                         x31 #> (Intercept)_Iran        0.0 #> (Intercept)_Netherlands 0.0 #> x1                      0.0 #> x21                     0.0 #> x22                     0.0 #> x31                     1.1  # center specific covariate has K=3 categories across 5 centers; y ~ Gaussian inv.prior.cov(X, lambda=c(0.5:3), family=gaussian, stratified=TRUE,               center_spec = c(\"Medium\",\"Big\",\"Small\",\"Big\",\"Small\"), L=5) #>                    (Intercept)_Big (Intercept)_Medium (Intercept)_Small  x1 x21 #> (Intercept)_Big                0.5                0.0               0.0 0.0 0.0 #> (Intercept)_Medium             0.0                0.5               0.0 0.0 0.0 #> (Intercept)_Small              0.0                0.0               0.5 0.0 0.0 #> x1                             0.0                0.0               0.0 1.5 0.0 #> x21                            0.0                0.0               0.0 0.0 1.5 #> x22                            0.0                0.0               0.0 0.0 0.0 #> x31                            0.0                0.0               0.0 0.0 0.0 #> sigma2                         0.0                0.0               0.0 0.0 0.0 #>                    x22 x31 sigma2 #> (Intercept)_Big    0.0 0.0    0.0 #> (Intercept)_Medium 0.0 0.0    0.0 #> (Intercept)_Small  0.0 0.0    0.0 #> x1                 0.0 0.0    0.0 #> x21                0.0 0.0    0.0 #> x22                1.5 0.0    0.0 #> x31                0.0 1.5    0.0 #> sigma2             0.0 0.0    2.5  # center specific covariate has K=4 categories across 5 centers; y ~ Gaussian inv.prior.cov(X, lambda=1, family=gaussian, stratified=TRUE, center_spec = c(3,1:4), L=5) #>               (Intercept)_1 (Intercept)_2 (Intercept)_3 (Intercept)_4 x1 x21 #> (Intercept)_1             1             0             0             0  0   0 #> (Intercept)_2             0             1             0             0  0   0 #> (Intercept)_3             0             0             1             0  0   0 #> (Intercept)_4             0             0             0             1  0   0 #> x1                        0             0             0             0  1   0 #> x21                       0             0             0             0  0   1 #> x22                       0             0             0             0  0   0 #> x31                       0             0             0             0  0   0 #> sigma2                    0             0             0             0  0   0 #>               x22 x31 sigma2 #> (Intercept)_1   0   0      0 #> (Intercept)_2   0   0      0 #> (Intercept)_3   0   0      0 #> (Intercept)_4   0   0      0 #> x1              0   0      0 #> x21             0   0      0 #> x22             1   0      0 #> x31             0   1      0 #> sigma2          0   0      1"},{"path":"https://hassanpazira.github.io/BFI/reference/summary.bfi.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing BFI Fits — summary.bfi","title":"Summarizing BFI Fits — summary.bfi","text":"Summary method object class 'bfi' created MAP.estimation function.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/summary.bfi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing BFI Fits — summary.bfi","text":"","code":"# S3 method for bfi summary(object, cur_mat = FALSE,         digits = max(3, getOption(\"digits\") - 3), ...)"},{"path":"https://hassanpazira.github.io/BFI/reference/summary.bfi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing BFI Fits — summary.bfi","text":"object fitted bfi object. cur_mat logical; TRUE, minus curvature matrix around estimated parameters returned printed. Default FALSE. digits significant digits printout. ... additional arguments affecting summary produced.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/summary.bfi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarizing BFI Fits — summary.bfi","text":"summary.bfi() gives information MAP estimates parameters model. can used bfi objects built MAP.estimation function. output summary method shows details model, .e. formula, family link function used specify generalized linear model, followed information estimates, standard deviations credible intervals. Information log-likelihood posterior convergence status also provided. default, summary.bfi function return (minus) curvature matrix, user can use cur_mat = TRUE print .","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/summary.bfi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizing BFI Fits — summary.bfi","text":"summary.bfi returns object class summary.bfi, list following components: theta_hat component object. last element vector estimate dispersion parameter (sigma2) family = gaussian. See MAP.estimation function. A_hat component object. See MAP.estimation function. sd component object. family = gaussian, last element vector square root estimated dispersion. See MAP.estimation function. Lambda component object. See MAP.estimation function. formula component object. See MAP.estimation function. n component object. See MAP.estimation function. np component object. See MAP.estimation function. family component object. See MAP.estimation function. intercept component object. See MAP.estimation function. convergence component object. See MAP.estimation function. control component object. See MAP.estimation function. estimate estimated regression coefficients, .e., without estimate sigma2. logLikPost value log-likelihood posterior density evaluated estimates (theta_hat). link link function. default gaussian family identity link function binomial family logit link function used. dispersion estimated variance random error, .e., sigma2. dispersion taken 1 binomial family. CI 95% credible interval MAP estimates parameters.","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/summary.bfi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarizing BFI Fits — summary.bfi","text":"Hassan Pazira Maintainer: Hassan Pazira hassan.pazira@radboudumc.nl","code":""},{"path":[]},{"path":"https://hassanpazira.github.io/BFI/reference/summary.bfi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing BFI Fits — summary.bfi","text":"","code":"#------------- # y ~ Gaussian #------------- # model assumption: theta <- c(1, 2, 3, 4, 1.5)  # coefficients and sigma2 = 1.5  #---------------- # Data Simulation #---------------- n      <- 40 X      <- data.frame(x1=rnorm(n),                     # continuous variable                      x2=sample(1:3, n, replace=TRUE)) # categorical variable Xx2_1  <- ifelse(X$x2 == '2', 1, 0) Xx2_2  <- ifelse(X$x2 == '3', 1, 0) X$x2   <- as.factor(X$x2) eta    <- theta[1] + theta[2] * X$x1 + theta[3] * Xx2_1 + theta[4] * Xx2_2 mu     <- gaussian()$linkinv(eta) y      <- rnorm(n, mu, sd = sqrt(theta[5]))  #---------------- # MAP estimations #---------------- Lambda <- inv.prior.cov(X, lambda = c(0.1, 0.5), family = gaussian) fit    <- MAP.estimation(y, X, family = gaussian, Lambda) class(fit) #> [1] \"bfi\"  #------------------------- # Summary of MAP estimates #------------------------- summary(fit) #>  #> Summary of the model: #>  #>    Formula: y ~ x1 + x2  #>     Family: ‘gaussian’  #>       Link: ‘identity’ #>  #> Coefficients: #>  #>             Estimate Std.Dev CI 2.5% CI 97.5% #> (Intercept)   0.9798  0.2752  0.4404   1.5191 #> x1            1.9610  0.1978  1.5733   2.3487 #> x22           3.3611  0.4181  2.5417   4.1804 #> x23           4.1668  0.4334  3.3172   5.0163 #>  #> Dispersion parameter (sigma2):  1.256  #>             log Lik Posterior:  -53.74  #>                   Convergence:  0  sumfit <- summary(fit, cur_mat = TRUE) #>  #> Summary of the model: #>  #>    Formula: y ~ x1 + x2  #>     Family: ‘gaussian’  #>       Link: ‘identity’ #>  #> Coefficients: #>  #>             Estimate Std.Dev CI 2.5% CI 97.5% #> (Intercept)   0.9798  0.2752  0.4404   1.5191 #> x1            1.9610  0.1978  1.5733   2.3487 #> x22           3.3611  0.4181  2.5417   4.1804 #> x23           4.1668  0.4334  3.3172   5.0163 #>  #> Dispersion parameter (sigma2):  1.256  #>             log Lik Posterior:  -53.74  #>                   Convergence:  0  #>  #> Minus the Curvature Matrix:  #>  #>             (Intercept)      x1     x22     x23  sigma2 #> (Intercept)     31.9350 -6.4447  9.5505  8.7546 -0.1959 #> x1              -6.4447 27.4705 -2.6762  0.2255 -0.3923 #> x22              9.5505 -2.6762  9.6505  0.0000 -0.6722 #> x23              8.7546  0.2255  0.0000  8.8546 -0.8335 #> sigma2          -0.1959 -0.3923 -0.6722 -0.8335 82.5132 sumfit$estimate #> [1] 0.9797599 1.9610016 3.3610560 4.1667611 sumfit$logLikPost #> [1] -53.73547 sumfit$dispersion #>   sigma2  #> 1.256477  sumfit$CI #>                 2.5 %   97.5 % #> (Intercept) 0.4404096 1.519110 #> x1          1.5732815 2.348722 #> x22         2.5416767 4.180435 #> x23         3.3172291 5.016293 class(sumfit) #> [1] \"summary.bfi\""},{"path":"https://hassanpazira.github.io/BFI/reference/trauma.html","id":null,"dir":"Reference","previous_headings":"","what":"Trauma patients from different hospitals — trauma","title":"Trauma patients from different hospitals — trauma","text":"data set consists data 371 trauma patients three hospitals. binary variable mortality used outcome, variables age, sex, Injury Severity Score (ISS, ranging 1 (low) 75 (high)) Glasgow Coma Scale (GCS, expresses level consciousness, ranging 3 (low) 15 (high)) used covariates. three types hospitals: peripheral hospital without neuro-surgical unit (Status = 1), peripheral hospital neuro-surgical unit (Status = 2), academic medical center (Status = 3). Originally, data come multi center study collected different aim. educational purposes minor changes made, see references .","code":""},{"path":"https://hassanpazira.github.io/BFI/reference/trauma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trauma patients from different hospitals — trauma","text":"","code":"data(trauma)"},{"path":"https://hassanpazira.github.io/BFI/reference/trauma.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Trauma patients from different hospitals — trauma","text":"Jonker M.., Pazira H. Coolen .C.C. (2023). Bayesian Federated Inference Statistical Models, Statistics Medicine, Vol. 0(0), 0-0. <https://doi.org/10.48550/arXiv.2302.07677> Draaisma J.M.Th, de Haan .F.J., Goris R.J.. (1989). Preventable Trauma Deaths Netherlands - prospective Multicentre Study, journal Trauma, Vol. 29(11), 1552-1557.","code":""},{"path":"https://hassanpazira.github.io/BFI/news/index.html","id":"bfi-v112-latest","dir":"Changelog","previous_headings":"","what":"BFI v1.1.2 (Latest)","title":"BFI v1.1.2 (Latest)","text":"package updated address NOTEs identified previous CRAN submission.","code":""},{"path":"https://hassanpazira.github.io/BFI/news/index.html","id":"bfi-v111","dir":"Changelog","previous_headings":"","what":"BFI v1.1.1","title":"BFI v1.1.1","text":"package prepared submission CRAN minor modifications.","code":""},{"path":"https://hassanpazira.github.io/BFI/news/index.html","id":"bfi-v110","dir":"Changelog","previous_headings":"","what":"BFI v1.1.0","title":"BFI v1.1.0","text":"functions inv.prior.cov() bfi() adapted center specific variable. function summary() updated used case stratification. manual pdf updated case center specific variable. Henceforth BFI package can called Python. vignette also added package calling BFI Python.","code":""},{"path":"https://hassanpazira.github.io/BFI/news/index.html","id":"bfi-v100","dir":"Changelog","previous_headings":"","what":"BFI v1.0.0","title":"BFI v1.0.0","text":"release, package website built using pkgdown package. functions adapted extra arguments case stratification. manual pdf also updated.","code":""},{"path":"https://hassanpazira.github.io/BFI/news/index.html","id":"bfi-v064","dir":"Changelog","previous_headings":"","what":"BFI v0.6.4","title":"BFI v0.6.4","text":"manual pdf updated. also bugfix release resolve one minor bug.","code":""},{"path":"https://hassanpazira.github.io/BFI/news/index.html","id":"bfi-v063","dir":"Changelog","previous_headings":"","what":"BFI v0.6.3","title":"BFI v0.6.3","text":"release, package updated outputs inv.prior.cov() MAP.estimation() (different centers) dimensions intercept=FALSE used bfi(). Moreover, one argument bfi(), .e., const_var, added package handle constant variables. bugfix release resolve one minor bug well.","code":""},{"path":"https://hassanpazira.github.io/BFI/news/index.html","id":"bfi-v052","dir":"Changelog","previous_headings":"","what":"BFI v0.5.2","title":"BFI v0.5.2","text":"release, summary function (S3 method class bfi) added package. package pdf manual created package.","code":""},{"path":"https://hassanpazira.github.io/BFI/news/index.html","id":"bfi-v042","dir":"Changelog","previous_headings":"","what":"BFI v0.4.2","title":"BFI v0.4.2","text":"release, package updated several arguments, .e., intercept fitted . vignette added package well.","code":""},{"path":"https://hassanpazira.github.io/BFI/news/index.html","id":"bfi-v032","dir":"Changelog","previous_headings":"","what":"BFI v0.3.2","title":"BFI v0.3.2","text":"release, package can carry stratified analysis.","code":""},{"path":"https://hassanpazira.github.io/BFI/news/index.html","id":"bfi-v022","dir":"Changelog","previous_headings":"","what":"BFI v0.2.2","title":"BFI v0.2.2","text":"bugfix release resolve one minor bug, add two functions related building Gamma matrix. Moreover, package now handles categorical covariates two levels.","code":""}]
